% v1.2.0
% Version numbering: (project_goals_met?1:0).(added syntax).(refined spec)

embed 
 {{ tex-preamble
	\usepackage{txfonts}
	\usepackage{lmodern}
	\newcommand*{\orig}{\ensuremath{\!\multimapinv\!} }
}}




metavar termvar, x, y, z, id, l, this, return ::=  
indexvar index, i, j, k, o ::= 


grammar

% syntax

v :: 'v_' ::=                                   {{ com Values }}
	| b         ::  :: Boolean 									{{ com Boolean }}
	| n         ::  :: Number 									{{ com Number }}
	| str       ::  :: String 									{{ com String }}
	| undefined ::  :: Undefined 								{{ com Undefined }}
	| null      ::  :: null 									{{ com null }}
	| obj ::  :: ObjVal											{{ com ObjVal }}
	| arr ::  :: ArrVal											{{ com ArrVal }}
	| < func , s >	::  :: FuncClosure							{{ com FuncClosure }} 
																	{{ tex [\![ [[func]], [[s]] ]\!] }}
	| h ( a ) :: :: GetStore		 							{{ com GetStore }}
	| v1 u v2 :: :: ObjUnion									{{ com ObjUnion }}
																	{{ tex [[v1]] \cup [[v2]]}}

obj :: 'obj_' ::=
	| { l1 : v1 , .. , li : vi } ::  :: ObjVal					{{ com ObjVal }}

arr :: 'arr_' ::=
	| [ v1 , .. , v2 ] ::  :: ArrayVal 							{{ com ArrayVal }}

func :: 'func_' ::=
	| function id ( x1 , .. , xk ) { m } :: :: FunVal			{{ com FuncVal }}
	| function ( x1 , .. , xk ) { m } :: :: AnonFunVal			{{ com AnonFuncVal }}

e :: 'e_' ::=                                   {{ com Expression }}
	| v         ::  :: Value 									{{ com Value }}
	| id        ::  :: Deref 									{{ com Deref }}
	| assignTarget Ass e2  ::  :: Assign						{{ com Assign }}
	| e op e'   ::  :: BinExp 									{{ com BinExp }}
	| assignTarget postAssign  ::  :: PostAssign				{{ com PostAssign }}
	| preAssign assignTarget   ::  :: PreAssign 				{{ com PreAssign }}
	| preOp e   ::  :: PreExp 									{{ com PreExp }}
	| { l1 : e1 , .. , li : ei } ::  :: ObjExp					{{ com ObjExp }}
	| e . l 	::  :: PropExp									{{ com PropExp }} 
	| e [ e1 ] 	::  :: ArrExp									{{ com ArrExp }} 
	| e ( e1 , .. , e2 ) ::  :: CallExp							{{ com CallExp }} 
	| [ e1 , .. , e2 ] ::  :: ArrayExp 							{{ com ArrayExp }}
	| assignTarget ::  :: assignTargetExp
	| func 		::  :: Func
	| < @body { m } , s , h > ::  :: BodyClosure
																{{ tex [\![ @body\{[[m]]\}, [[s]], [[h]] ]\!] }}
Ass :: 'ass_' ::=	                                {{ com Assignments }}
				                                	{{ tex \approx }}
	| = 		::  :: PlainAssign                              {{ com PlainAssign }}
	| numOp =	::  :: NumAssign 								{{ com NumAssign }}

vRef :: 'vref_' ::=
	| id 		::  :: IdRef
	| vRef . l 	::  :: ObjRef
	| vRef [ n ] :: :: ArrRef

assignTarget :: 'asst_' ::= 						{{ com Assignment Targets }} 
	| vRef 		::  :: valueReference
	| assignTarget [ e ] :: :: ExpRef
	| assignTarget . l 	::  :: DotRef 							

m :: 'm_' ::=                                   {{ com Statement }}
	| e         ::  :: Expression 								{{ com Expression }}
	| m1 ; .. ; mi    ::  :: Seqs          						{{ com Seqs }}
	| varDec  ::  :: VarDeclaration								{{ com VarDeclaration }}
	| if ( e ) { m1 }  ::  :: IfStatement						{{ com IfStatement }}
	| if ( e ) { m1 } else { m2 }  ::  :: IfElseStatement		{{ com IfElseStatement }}
	| return e  ::  :: ReturnStatement							{{ com ReturnStatement }}
	| return    ::  :: Return 									{{ com Return }}
	| @def function id ( x1 , .. , xk ) { m } :: :: FuncDef		{{ com FuncDef }}
	| while ( e ) { m1 } ::  :: WhileStatement 					{{ com WhileStatement }} 
	| for ( e1 ; e2 ; e3 ) { m1 } ::  :: ForStatement1 			{{ com ForStatement1 }} 
	| for ( varDec ; e2 ; e3 ) { m1 } ::  :: ForStatement2 		{{ com ForStatement2 }} 
	| eps  		::  :: EmptyStatement							{{ com EmptyStatement }}
																{{ tex \epsilon }}

vd :: 'vd_' ::=                                 {{ com VariableDeclaration }}
	| id        ::  :: Declaration 								{{ com Declaration }}
	| id = e    ::  :: Definition 								{{ com Definition }}

varDec :: 'vd_' ::=
	| var vd1 , ... , vdk   ::  :: VarDeclaration 				{{ com VarDeclaration }}
ret :: 'ret_' ::=
	| return e 	::  :: ReturnExp								{{ com ReturnExp }}
	| return 	::  :: Return 									{{ com Return }}

% operators

op :: 'op_' ::=                                 {{ com BinaryOperation }}
	| numOp  	::  :: NumOp 									{{ com NumOp }}
	| cmpOp 	::  :: CmpOp 									{{ com CmpOp }}
	| numcmpOp 	::  :: NumCmpOp									{{ com NumCmpOp }}
	| boolOp 	::  :: BoolOp									{{ com BoolOp }}

numOp :: 'nop_' ::=
	| + 		::  :: Addition                                 {{ com Addition }}
	| - 		::  :: Subtraction                              {{ com Subtraction }}
	| / 		::  :: Division                                 {{ com Division }}
	| * 		::  :: Multiplication                           {{ com Multiplication }}
	| % 		::  :: Modulo                                   {{ com Modulo }}

numcmpOp :: 'ncop_' ::=
	| < 		::  :: LessThan                                 {{ com LessThan }}
	| > 		::  :: GreaterThan                              {{ com GreaterThan }}
	| <= 		::  :: LessEqual                                {{ com LessEqual }}
																	{{ tex \leq }}
	| >= 		::  :: GreaterEqual                             {{ com GreaterEqual }}
																	{{ tex \geq }}

cmpOp :: 'cop_' ::=
	| == 		::  :: Equal                                    {{ com Equal }}
	| != 		::  :: Unequal                                  {{ com Unequal }}
																	{{ tex !\!\!= }}
	| === 		::  :: StrictEqual                              {{ com StrictEqual }}
	| !== 		::  :: StrictUnequal                            {{ com StrictUnequal }}
																	{{ tex !\!\!== }}
boolOp :: 'bop_' ::=
	| || 		::  :: BooleanOr                                {{ com BooleanOr }}
	| && 		::  :: BooleanAnd                               {{ com BooleanAnd }}

preOp :: 'preop_' ::=                           {{ com PrefixOperation }}
	| ~ 		::  :: Negation                                 {{ com Negation }}
																	{{ tex -\! }}
	| !			::  :: BoolNegation                             {{ com BoolNegation }}
																	{{ tex !\! }}

preAssign :: 'preAssign_' ::=					{{ com PreAssign }}														
	| --		::  :: PreDecrement                             {{ com PreDecrement }}
																	{{ tex -\!\!-\!\! }}
	| ++		::  :: PreIncrement                             {{ com PreIncrement }}
																	{{ tex +\!\!+\!\! }}

postAssign :: 'postAssign_' ::=                         {{ com PostAssign }}
	| --		::  :: PostDecrement                             {{ com PostDecrement }}
																	{{ tex \!\!\!-\!\!- }}
	| ++		::  :: PostIncrement                             {{ com PostIncrement }}


																	{{ tex \!\!+\!\!+ }}
% the store / heap

a :: 'a_' ::= 									{{ com Heap Addresses }}
	| s ( id ) :: :: StoreAddress 								{{ com StoreAddress }}
	| a [ l ] :: :: PropAddress 								{{ com PropAddress }}
	| a [ n ] :: :: ArrAddress 									{{ com ArrAddress }}
	| addr ( e , s , h ) :: :: AddrLookup						{{ com AddrLookup }}

s :: 's_' ::=                                   {{ com Store }}
	| s1 + s2 	::  :: StoreUnion 				       			{{ com StoreUnion }}  
																	{{ tex [[s1]] \cup [[s2]] }}
	| { id1 : a1 , .. , idi : ai } ::  :: LiteralStore 			{{ com LiteralStore }}

h {{ tex \Theta}} :: 'h_' ::= 									{{ com Heap }} 
	| h1 + h2  	::  :: HeapUnion 								{{ com HeapUnion }}	
																	{{ tex [[h1]] \oplus [[h2]] }}
	| { a1 : v1 , .. , ak : vk } 	::  :: LiteralHeap 			{{ com LiteralHeap }}

% Typing definitions

b :: 'b_' ::=
	| true		::  :: True
	| false		::  :: False

T :: 'Tval_' ::=				                {{ com Value Type }}
	| number    ::  :: Number 									{{ com Number }}
	| boolean   ::  :: Boolean 									{{ com Boolean }}
	| string    ::  :: String 									{{ com String }}
	| undefined ::  :: undefined 								{{ com undefined }}
	| null      ::  :: null 									{{ com null }}
	| { l1 : T1 , .. , li : Ti } ::  :: ObjType					{{ com ObjType }}
	| T1 , ... , Ti -> Tj ::  :: FunctionType					{{ com FunctionType }}
	| < T , G > ::  :: ClosureType								{{ com ClosureType }}
																	{{tex [\![ [[T]], [[G]], ]\!]}}
	| [ T1 ]    ::  :: ArrayType								{{ com ArrayType }}
	| G ["return"] :: :: GammaType 								{{ com GammaType }} 
	| IllDefined ( T )  :: M:: IllDefinedType 					{{ com IllDefinedType }}
	| pending 	:: M:: PendingType								{{ com Pending }} 
	| T1 ~> T2  ::  :: DerivedType 								{{ com DerivedType }}

G {{ tex \Gamma}} , g {{ tex \gamma }} :: 'te_' ::= 					{{ com Context }}
	| \{}		::  :: EmptyContext								{{ com EmptyContext }}
	| { G }		::  :: SingletonContext							{{ com SingletonContext }}
	| G u G'	::  :: UnionContext								{{ com UnionContext }}
																	{{ tex [[G]] \cup [[G']] }}
	| id : T 	::  :: ContextItem								{{ com ContextItem }}
	| { id1 : T1 , .. , idk : Tk } 	::  :: ContextItems			{{ com ContextItems }}
	| merge( G1 , G2 , G3 )	:: M:: MergedContext				{{ com MergedContext }}

C :: 'C_' ::= 					                {{ com Constraint }}
	| \{}		 ::  :: EmptyConstraint							{{ com EmptyConstraint }}
	| C u C'	 ::  :: UnionConstraint							{{ com UnionConstraint }}
																	{{ tex [[C]] \cup [[C']] }}
	| C n C'	 ::  :: IntersectConstraint						{{ com IntersectConstraint }}
																	{{ tex [[C]] \cap [[C']] }}
	| U setIndex = n1 - n2 C :: :: BigUnion 						{{ com BigUnion }}
																	{{ tex \bigcup \limits_{[[setIndex]]=[[n1]]}^[[n2]] [[C]] }}
	| { T1 const T2 } ::  :: ConstLeq 										{{ com ConstLeq }}
	| ( C )		 ::  :: BracketedConstraint  					{{ com BracketedConstraint }}
																	{{ tex [[C]] }}
const :: 'const_' ::=
	| < 		 ::  :: LEqConstraint 							{{ com LEqConstraint }}
																	{{ tex \preceq }} 
	| > 		 ::  :: GEqConstraint 							{{ com GEqConstraint }}
																	{{ tex \succeq }} 
	| <c 		 ::  :: LEqCheckConstraint						{{ com LEqCheckConstraint }}
																	{{ tex {\color{red}\preceq_c} }} 
	| >c 		 ::  :: GEqCheckConstraint						{{ com GEqCheckConstraint }}
																	{{ tex {\color{red}\succeq_c} }} 
	| <o 		 ::  :: LEqOptConstraint						{{ com LEqOptConstraint }}
																	{{ tex \preceq_o }} 
	| >o 		 ::  :: GEqOptConstraint						{{ com GEqOptConstraint }}
																	{{ tex \succeq_o }} 
	| = 		 ::  :: EqConstraint							{{ com EqConstraint }}
																	{{ tex = }}

terminals :: 'terminals_' ::=
	| ->        ::  :: rightarrow 									{{ tex \rightarrow }}
	| ~>        ::  :: Rightarrow 									{{ tex \multimapinv }}
	| |-        ::  :: Entails              						{{ tex \vdash }}
	| ;         ::  :: semicolon
	| var       ::  :: var
	| \{}		::  :: emptyset             						{{ tex \varnothing }}

maps :: 'maps_' ::=
	| G 		::  :: Gamma
	| h 		::  :: heap
	| s 		::  :: store
	| addr 		::  :: Addr

sv :: 'sv_' ::= 								{{ com SetVar }}
	| C 		::  :: ConstraintSet						    {{ com ConstraintSet }}
	| X 		::  :: VariableSet							    {{ com VariableSet }}
	| dom( maps )	::  :: dom
	| codom( maps ) ::  :: codom

fv :: 'fv_' ::= 								{{ com FormulaVar }}
	| G 		::  :: ContextVar							    {{ com ContextVar }}
	| G ( id )  ::  :: ContextMember							{{ com ContextMember }}
	| sv 		::  :: SetFormulaVar							{{ com SetFormulaVar }}
	| T 		::  :: TypeFormulaVar							{{ com TypeFormulaVar }}
	| id 		::  :: IDFormulaVar								{{ com IDFormulaVar }}
	| func  	::  :: FuncFormulaVar							{{ com FuncFormulaVar }}
	| m 		::  :: StatmentFormulaVar                       {{ com ExpFormulaVar }}
	| a 		::  :: address
	| maps 		::  :: maps
	| ( fv1 , .. , fvi ) :: :: compound

n :: 'n_' ::=
	| 0			::  :: Zero
	| 1			::  :: One
	| 2			::  :: Two
	| 3			::  :: Three
	| setIndex  ::  :: SetIndex

setIndex :: 'ix_' ::=
	| i 		::  :: i
	| k 		::  :: k
	| j 		::  :: j

formula :: formula_ ::=  
	|  judgement                 		::  :: judgement         {{ com judgement }}
	|  not formula               		::  :: not               {{ com not }}
																    	{{ tex \neg [[formula]] }} 
	|  ( formula )               		::  :: brackets          {{ com brackets }}
																    	{{ tex ([[formula]]\!) }}  
	|  [ formula ]               		::  :: bracketsHidden    {{ com bracketsHidden }}
																    	{{ tex [[formula]] }}  
	|  formula1 --- formulak     		::  :: listForm          {{ com listForm }}
																    	{{ tex [[formula1]] \quad\hdots\quad [[formulak]] }}
	|  formula \/ formula’       		::  :: or                {{ com or }}
																    	{{ tex [[formula]] \vee [[formula’]] }}
	|  formula /\ formula’       		::  :: and               {{ com and }}
																    	{{ tex [[formula]] \wedge [[formula’]] }}
	|  formula for formula'      		::  :: condform          {{ com condform }}
																		{{ tex [[formula]] \hspace{1pc}\textit{for}\hspace{6pt} [[formula']] }}
	|  A setIndex formula        		::  :: ForAll				{{ com ForAll }}
																		{{ tex \forall [[setIndex]][[formula]]}}
	|  A setIndex in sv formula  		::  :: ForAllIn			{{ com ForAllIn }}
																		{{ tex \forall [[setIndex]]\in[[sv]][[formula]]}}
	|  fv = fv2                  		::  :: fequal 			{{ com fequal }}
	|  fv != fv2                 		::  :: fnotequal 			{{ com fnotequal }}
																		{{ tex [[fv]] \neq [[fv2]] }}
	|  fv in sv2                 		::  :: Contains			{{ com Contains }}
																	{{ tex [[fv]] \in [[sv2]] }}
	|  fv !in sv2                		::  :: NotContains		{{ com NotContains }}
																	{{ tex [[fv]] \notin [[sv2]] }}
	| T is fresh                 		::  :: Fresh 			{{ com Fresh }} 
	| T1 , .. , Ti are fresh 			::  :: Freshs 			{{ com Freshs }} 
	| a is fresh 						::  :: FreshA 			{{ com FreshAddress }} 
	| a1, .., ak are fresh 				::  :: FreshAs 			{{ com FreshAddresses }} 
	| sv1 < sv2 						::  :: Subset 			{{ com Subset }}
																	{{ tex [[sv1]] \subseteq [[sv2]] }}

defns
Jop :: '' ::=

	defn
	< m , s , h > -> < m' , s' , h' > :: ::reduce::''  
	{{ tex \langle [[m]], [[s]], [[h]] \rangle [[->]] \langle [[m']], [[s']], [[h']] \rangle }}
	by

		------------------------------------------------- 			::   Func
		<func, s, h> -> <<func, s>, s, h>

		<e, s, h> -> <e', s', h'>
		---------------------------------------------				::   Obj
		< {l1: v1, .., lj: vj, l: e, l1': e1, .., lj': ej}, s, h> -> <{l1: v1, .., lj: vj, l: e', l1': e1, .., lj': ej}, s', h>

		<e, s, h> -> <e', s', h'>
		---------------------------------------------				::   Arr
		<[v1, .., vj, e, e1, .., ek], s, h> -> <[v1, .., vj, e', e1, .., ek], s', h'>

		id in dom(s)
		s(id) in dom(h)
		--------------------------                  		        ::   Deref
		<id, s, h> -> <h(s(id)), s, h>

		e != vRef
		<e, s, h> -> <e', s', h'>
		----------------------- 									::   Prop1
		<e.l, s, h> -> <e'.l, s', h'>

		----------------------- 									::   Prop3
		< {l1: v1, .., lj: vj, l: v, l1': v1', .., lj': vj'}.l, s, h> -> <v, s', h'>

		e != vRef
		<e, s, h> -> <e', s', h'>
		---------------------------------------------				::   ArrGet1
		<e[e2], s, h> -> <e'[e2], s', h'>

		<e, s, h> -> <e', s', h'>
		---------------------------------------------				::   ArrGet2
		<vRef[e], s, h> -> <vRef[e'], s', h'>

		---------------------------------------------				::   ArrGet3
		<[v1, .., vj][k], s, h> -> <vk, s, h>

		(vRef, s, h) in dom(addr)
		v = h(addr(vRef, s, h))
		----------------------- 									::   VRef
		< vRef, s, h> -> <v, s', h'>


		e != v.l
		<e, s, h> -> <e', s', h'>
		----------------------- 									::   Call1
		< e(e1,..,ei), s, h> -> <e'(e1,..,ei), s', h'>

		<e1, s, h> -> <e1', s', h'>
		----------------------- 									::   Call2
		< v(v1,..,vi,e1,e2,..,ej), s, h> -> <v(v1,..,vi,e1',e2,..,ej), s', h'>

		a is fresh
		a0 is fresh
		a1, .., ai are fresh
		s'o = s'+{id:a, this:a0, x1:a1, .., xi:ai}
		ho = h+{a:<function id(x1, .., xi){m},s'>, a0:undefined, a1:v1, .., ai:vi}
		-------------------------- 									:: 	 CallNamed
		< <function id(x1, .., xi){m},s'>(v1, .., vi), s, h> -> <<@body{m}, s'o, ho>, s,ho>

		a0 is fresh
		a1, .., ai are fresh
		s'o = s'+{this:a0, x1:a1, .., xi:ai}
		ho = h+{a0:undefined, a1:v1, .., ai:vi}
		-------------------------- 									:: 	 CallAnon
		< <function(x1, .., xi){m},s'>(v1, .., vi), s, h> -> <<@body{m}, s'o, ho>, s,ho>

		a is fresh
		a0 is fresh
		a1, .., ai are fresh
		<v0.l, s, h> -> <<function id(x1, .., xi){m}, s'>, s'', h'>
		s'o = s'+{id:a, this:a0, x1:a1, .., xi:ai}
		h'o = h'+{a:<function id(x1, .., xi){m},s'>, a0:v0, a1:v1, .., ai:vi}
		-------------------------- 									:: 	 PropCallNamed
		< v0.l(v1, .., vi), s, h> -> <<@body{m}, s'o, ho>, s'',h'o>

		a0 is fresh
		a1, .., ai are fresh
		<v0.l, s, h> -> <<function(x1, .., xi){m}, s'>, s'', h'>
		s'o = s'+{this:a0, x1:a1, .., xi:ai}
		h'o = h+{a0:v0, a1:v1, .., ai:vi}
		-------------------------- 									:: 	 PropCallAnon
		< v0.l(v1, .., vi), s, h> -> <<@body{m}, s'o, h'o>, s,h'o>

		m != return v; m'
		<m, s', h> -> <m', s'', h'>
		------------------------------------------------ 			:: 	 CallBody1
		<<@body{m},s', h>,s,h> -> <<@body{m'}, s'', h'>, s, h'>

		------------------------------------------------ 			:: 	 CallBody2
		<<@body{v},s', h>,s,h> -> <undefined, s, h>

		------------------------------------------------ 			:: 	 CallBody3
		<<@body{return v; m},s',h>,s,h> -> <v, s, h>

		------------------------------------------------ 			:: 	 CallBody4
		<<@body{return; m},s',h>,s,h> -> <undefined, s, h>

		-------------------                        		            ::   Seq1
		<v; m1; ..; mi, s, h> -> <m1; ..; mi, s, h>

		<m1, s, h> -> <m1', s', h'>
		----------------------------              		            ::   Seq2
		<m1;m2; ..; mi, s, h> -> <m1'; m2; ..; mi, s', h'>

		assignTarget != vRef
		<assignTarget, s, h> -> <assignTarget', s', h'>
		----------------------------                 		        ::   Assign1
		<assignTarget Ass e1, s, h> -> <assignTarget' Ass e1, s', h'>

		<e, s, h> -> <e', s', h'>
		----------------------------                 		        ::   Assign2
		<vRef Ass e, s, h> -> <vRef Ass e', s', h'>

		(vRef, s, h) in dom(addr)
		---------------------------------            		        ::   Assign3
		<vRef = v, s, h> -> <v, s, h + {addr(vRef, s, h): v}>

		assignTarget != vRef
		<assignTarget, s, h> -> <assignTarget, s', h'>
		---------------------------------------------------			:: AssignTarget1
		<assignTarget.l, s, h> -> <assignTarget'.l, s', h'>

		assignTarget != vRef
		<assignTarget, s, h> -> <assignTarget', s', h'>
		----------------------------------------------- 			:: AssignTarget2
		<assignTarget[e], s, h> -> <assignTarget'[e], s', h'>

		<e, s, h> -> <e', s', h'>
		-------------------------------------- 						:: AssignTarget3
		<vRef[e], s, h> -> <vRef[e'], s', h'>

		id !in dom(s)
		a is fresh
		--------------------------------------------				:: 	AssignUndef
		<id = v, s, h> -> <v, s + {id: a}, h+{a: v}>

		(vRef.l, s, h) !in dom(addr)
		(vRef, s, h) in dom(addr)
		a = addr(vRef, s, h)
		----------------------------------------------- 			::  PropAdd
		<vRef.l = v, s, h> -> <v,s, h+{a:h(a) u {l:v}}>

		----------------------------                 		        ::   AssignNum
		<vRef numOp= v, s, h> -> <vRef = vRef numOp v, s, h>

		<e1, s, h> -> <e1', s', h'>
		--------------------------------                            ::   BinOp1
		<e1 op e2, s, h> -> <e1' op e2, s', h'>

		<e2, s, h> -> <e2', s', h'>
		-------------------------------                             ::   BinOp2
		<v op e2, s, h> -> <v op e2', s', h'>

		n1 numOp n2 = n
		-----------------------                                     ::   NumOp
		<n1 numOp n2, s, h> -> <n, s, h>

		b1 boolOp b2 = b
		-----------------------                                     ::   BoolOp
		<b1 boolOp b2, s, h> -> <b, s, h>

		v1 cmpOp v2 = b
		-----------------------                                     ::   CmpOp
		<v1 cmpOp v2, s, h> -> <b, s, h>

		n1 numcmpOp n2 = b
		-----------------------                                     ::   NumCmpOp
		<n1 numcmpOp n2, s, h> -> <b, s, h>

		<e, s, h> -> <e', s', h'>
		--------------------------------                            ::   PreOp
		<preOp e1, s, h> -> <preOp e1', s', h'>

		!b1 = b2
		-----------------------                                     ::   BoolNeg
		<!b1, s, h> -> <b2, s, h>

		~n1 = n
		-----------------------                                     ::   NumNeg
		<~n1, s, h> -> <n, s, h>

		assignTarget != vRef
		<assignTarget, s, h> -> <assignTarget', s', h'>
		--------------------------------                            ::   PreAssign
		<preAssign assignTarget, s, h> -> <preAssign assignTarget', s', h'>

		assignTarget != vRef
		<assignTarget, s, h> -> <assignTarget', s', h'>
		--------------------------------                            ::   PostAssign
		<assignTarget postAssign, s, h> -> <assignTarget' postAssign, s', h'>

		(vRef, s, h) in dom(addr)
		a = addr(vRef, s, h)
		h(a) + 1 = v
		-----------------------------                               ::   PostInc
		<vRef++, s, h> -> <h(a), s, h + {a: v}>

		(vRef, s, h) in dom(addr)
		a = addr(vRef, s, h)
		h(a) + 1 = v
		-----------------------------                               ::   PreInc
		<++vRef, s, h> -> <v, s, h + {a: v}>

		(vRef, s, h) in dom(addr)
		a = addr(vRef, s, h)
		h(a) - 1 = v
		-----------------------------                               ::   PostDec
		<vRef--, s, h> -> <h(a), s, h + {a: v}>

		(vRef, s, h) in dom(addr)
		a = addr(vRef, s, h)
		h(a) - 1 = v
		-----------------------------                               ::   PreDec
		<--vRef, s, h> -> <v,s, h + {a: v}>

		a is fresh
		-----------------------------                		        ::   Var1
		<var id, s, h> -> <eps, s + {id: a}, h + {a: undefined}>

		<e, s, h> -> <e', s', h'>
		-----------------------------------               		    ::   Var2
		<var id = e, s, h> -> <var id = e', s, h'>

		a is fresh
		----------------------------------------       		        ::   Var3
		<var id = v, s, h> -> <eps, s + {id: a}, h + {a: v}>

		----------------------------------------- 			        ::   Var4
		<var vd, vd', s, h> -> <var vd; var vd', s, h>

		a is fresh
		------------------------------------------------- 			::   FuncDef
		<@def function x(y1,..,yi) {m}, s, h> -> <eps, s + {x: a}, h  + {a: <function (y1,..,yi) {m}, s>}> 

		<e, s, h> -> <e',s',h'>
		------------------------------------- 						:: Return1
		<return e, s, h> -> <return e',s',h'>

		------------------------------------------					:: Return2
		<return, s, h> -> <return undefined, s, h>

		<e, s, h> -> <e', s', h'>
		--------------------------------------------------------    ::	 If1
		<if (e) {m1} else {m2}, s, h> -> <if (e') {m1} else {m2}, s', h'>

		--------------------------------------		                ::	 If2
		<if (true) {m1} else {m2}, s, h> -> <m1, s, h>

		--------------------------------------		                ::	 If3
		<if (false) {m1} else {m2}, s, h> -> <m2, s, h>
		
		--------------------------------------------------------    ::	 If4
		<if (e) {m1}, s, h> -> <if (e) {m1} else {}, s, h>

		--------------------------------------------------------    ::	 While
		<while (e) {m1}, s, h> -> <if (e) {m1; while (e) {m1}}, s, h>

		--------------------------------------------------------    ::	 For
		<for (e1; e2; e3) {m1}, s, h> -> <e1; if (e2) {m1;e3; while (e2) {m1;e3}}, s, h>

	% Note: Only expressions have a type - the more general statements do not
	defn
	G |- e : T | C G' :: ::expType::''
	 {{ tex [[G]] [[|-]] [[e]] : [[T]]\hspace{5pt}| _{ [[C]] } \hspace{5pt} [[G']] }}
	 by




		% Typing rules for values

		-------------------------                           		:: V_Num
		G |- n : number |\{} G

		--------------------------                          		:: V_Bool
		G |- b : boolean |\{} G

		---------------------------                         		:: V_String
		G |- str : string |\{} G

		------------------------------------                		:: V_Undefined
		G |- undefined : undefined |\{} G

		--------------------------                          		:: V_Null
		G |- null : null |\{} G






		% Object types simply depend on their expressions

		T1, .., Tk are fresh
		G |- e1 : T1' | C1 G1   ---   Gk-1 |- ek : Tk' | Ck Gk 
		C = (U i=1-k Ci) u (U i=1-k {Ti = Ti'})
		---------------------------------------------------------   :: V_Obj
		G |- {l1: e1, .., lk: ek} : {l1: T1, .., lk: Tk} |C Gk

		% Array types simply depend on their expressions too (but all constrained to one)

		T is fresh
		G |- e1 : T1 | C1 G1   ---   Gk-1 |- ek : Tk | Ck Gk 
		C = (U i=1-k Ci) u (U i=1-k {T >c Ti'})
		---------------------------------------------------------   :: V_Arr
		G |- [e1, .., ek] : [T] |C Gk

		dom(g) < dom(s)
		g |- func : <T, g> |C g'
		------------------------									:: V_Closure
		G |- <func, s> : <T, g> |C G




		% Function types:

		% if the return is not ill-defined, we use its type for the function
		
		T, T0, T1, .., Ti are fresh
		G u {this: T0, x1:T1, .., xi:Ti, return:pending} |- m1; ..; mj |C G'
		G'["return"] = Tk
		Tk != IllDefined(Tk')
		----------------------------------------------------------------------- :: AnonFun
		G |- function (x1, .., xi) { m1; ..; mj } : <T0, T1, .., Ti -> T, G> |C u {T = Tk} G

		% still pending after analysis means there were no returns anywhere
		
		T, T0, T1, .., Ti are fresh
		G u {this: T0, x1:T1, .., xi:Ti, return:pending} |- m1; ..; mj |C G'
		G'["return"] = pending
		----------------------------------------------------------------------- :: AnonVoid
		G |- function (x1, .., xi) { m1; ..; mj } : <T0, T1, .., Ti -> T, G> |C u {T = undefined} G

		% NB the case IllDefined(T) is not covered, as this is illegal

		% 3 and 4 just add 'id' to the inner type environment (otherwise like 1 and 2)

		T, T0, T1, .., Ti are fresh
		Go = G u {this: T0, x1:T1, .., xi:Ti, id:<T0, T1, .., Ti -> T, G>, return:pending}
		Go |- m1; ..; mj |C G'
		G'["return"] = Tk
		Tk != IllDefined(Tk')
		----------------------------------------------------------------------- :: NamedFun
		G |- function id(x1, .., xi) { m1; ..; mj } : <T0, T1, .., Ti -> T, G> |C u {T = Tk} G

		T, T0, T1, .., Ti are fresh
		Go = G u {this: T0, x1:T1, .., xi:Ti, id:<T0, T1, .., Ti -> T, G>, return:pending}
		Go |- m1; ..; mj |C G'
		G'["return"] = IllDefined(pending)
		----------------------------------------------------------------------- :: NamedVoid
		G |- function id(x1, .., xi) { m1; ..; mj } : <T0, T1, .., Ti -> T, G> |C u {T = undefined} G




		
		% Variable retrieval

		% can't read an ill-defined variable (one which may not have been initialised)
		G(id) = T
		T != IllDefined(T')
		---------------------		                                :: IdType
		G |- id : T |\{} G

		T is fresh
		G |- e : T1 |C G1
		---------------------------------------------------------   :: PropType
		G |- e.l : T |C u {{l:T} > T1} G1
	
		T is fresh
		G  |- e  : T1 |C1 G1
		G1 |- e1 : T2 |C2 G2
		---------------------------------------------------------   :: ArrayType
		G |- e[e1] : T |(C1 u C2) u ({[T] > T2} u {T1 = number}) G2
	




		% Function Calls

		% I'm saying 'this' is undefined if unspecified (in practice 'this' is global object e.g. window)

		T0,T1,..,Ti,Tk,Tk' are fresh
		G  |- e  : T   |C0 G0
		G0 |- e1 : T1' |C1 G1   ---   Gi-1 |- ei : Ti' |Ci Gi
		C' = ({T0 = undefined} u (U j=1-i {Tj >c Tj'})) u ({Tk <c Tk'} u {T=<T0, T1, .., Ti -> Tk, g>})
		-------------------------------------------------- 			:: CallType
		G |- e(e1,..,ei) : Tk' |(U j=0-i Cj) u C' Gi

		T0,T1,..,Ti,Tk,Tk' are fresh
		G  |- e.l : T   |C0 G0
		G  |- e   : T0' |C' G'
		G0 |- e1  : T1' |C1 G1   ---   Gi-1 |- ei : Ti' |Ci Gi
		C' = ({T0 >c T0'} u (U j=1-i {Tj >c Tj'})) u ({Tk <c Tk'} u {T=<T0, T1, .., Ti -> Tk, g>})
		-------------------------------------------------- 			:: PropCallType
		G |- e.l(e1,..,ei) : Tk' |(U j=0-i Cj) u C' Gi

		T is fresh
		g u {return:pending} |- m |C g'
		g |- (s,h)
		g'["return"] = pending
		----------------------------------------- 					:: FunBodyType
		G |- <@body{m}, s, h>: T |C u {T=undefined} G

		g u {return:pending} |- m |C g'
		g |- (s,h)
		g'["return"] = Tk
		Tk != IllDefined(Tk')
		----------------------------------------- 					:: VoidBodyType
		G |- <@body{m}, s, h>: T |C u {T=Tk} G





		% Assignment operations

		% contentious about whether assigntype should update gamma. For my
		% style of constraint solving (discarding used constraints), I need to
		% update gamma, so might as well update it in the formal system too.

		G  |- assignTarget : T1 |C1 G1
		G1 |- e : T2 |C2 G2
		------------------------------------------------------	 	:: AssignType 
		G  |- assignTarget = e : T2 |C1 u { T1 >c T2 } G2

		T is fresh
		id !in dom(G)
		G  |- e : T1 |C1 G1
		------------------------------------------------------	 	:: AssignTypeUndef
		G  |- id = e : T1 |C1 u { T >c T1 } G2 u {id: T}

		% dots make list comprehensions hard to express in OTT
		
		G |- id : T0 |C0 G
		G |- id.l1 : T1 |C1 G
		G |- id.l1.lk : Tk |Ck G
		G |- e : T' |C' G1
		G' = G1 u {id: { l1 :{ lk: {l:T'}~>Tk }~>T1 }~>T0 }
		C = { Tk >o {l:T'} }
		------------------------------------------------------	 	:: PropAssignType
		G  |- id.l1.lk.l = e : T' |(U j=0-i Cj) u (C' u C) G'

		G1 |- assignTarget : T1 |C1 G1
		G  |- e : T2 |C2 G2
		------------------------------------------------------	 	:: NumAssignType
		G  |- assignTarget numOp= e : T1 |(C1 u C2) u ({ T2 = T1 } u {T1 = number}) G2





		% Mathematical Binary Operations

		G  |- e1 : T1 |C1 G1
		G1 |- e2 : T2 |C2 G2
		------------------------------------------------------------  :: NumOpType
		G |- e1 numOp e2 : number |(C1 u C2) u ({T1 = number} u {T2 = number}) G2

		% Boolean Binary operations

		G  |- e1 : T1 |C1 G1
		G1 |- e2 : T2 |C2 G2
		------------------------------------------------------------  :: BoolOpType
		G |- e1 boolOp e2 : boolean | (C1 u C2) u ({T1 = boolean} u {T2 = boolean}) G2

		% TODO? Object comparison always returns false, and I think == should be disallowed, at least for objects
		% Equality Operations

		G  |- e1 : T1 |C1 G1
		G1 |- e2 : T2 |C2 G2
		-------------------------------------------------------		  :: CmpOpType
		G |- e1 cmpOp e2 : boolean |(C1 u C2) u {T1 = T2} G2

		G  |- e1 : T1 |C1 G1
		G1 |- e2 : T2 |C2 G2
		-------------------------------------------------------		  :: NumCmpOpType
		G  |- e1 numcmpOp e2 : boolean |(C1 u C2) u ({T2 = number} u {T1 = number}) G2





		% Unary Operation

		G |- e : T1 |C G'
		------------------------------------------- 	:: NegBoolType
		G |- !e : boolean |C u {T1 = boolean} G'

		G |- e : T1 |C G'
		------------------------------------------- 	:: NegNumType
		G |- ~e : number |C u {T1 = number} G'

		G |- assignTarget : T1 |C G'
		------------------------------------------- 	:: PreOpType
		G |- preAssign assignTarget : number |C u {T1 = number} G'

		G |- assignTarget : T1 |C G'
		------------------------------------------- 	:: PostOpType
		G |- assignTarget postAssign : number |C u {T1 = number} G'


	defn
	G |- m | C G' :: :: typable::'' 
	 {{ tex [[G]] [[|-]] [[m]] \hspace{5pt}| _{ [[C]] } \hspace{5pt} [[G']]}}
	 by
		% We say that a statement m is typable if all expressions contained within it are well typed by the definition above.

		G |- e : T |C G'
		-------------------                                		    :: ExpTypable
		G |- e |C G'

		G |- function id(x1, .., xi) { m1; ..; mj } : T |C G'
		-----------------------------------------------------------------     :: FuncDefTypable
		G |- @def function id(x1, .., xi) { m1; ..; mj } |C G' u {id: T}

		G |- return undefined |C G'
		--------------------------- 								:: RetTypable1
		G |- return |C G'

		G |- e : T |C G'
		G'["return"] = pending
		--------------------------------- 							:: RetTypable2
		G |- return e |C G' u {return: T}

		G |- e : T |C G'
		G'["return"] = IllDefined(T')
		------------------------------------------ 					:: RetTypable3
		G |- return e |C u {T=T'} G' u {return: T}

		G |- e : T |C G'
		G'["return"] = T'
		------------------------------------------					:: RetTypable4
		G |- return e |C u {T=T'} G'


		G |- m1 |C1 G1 --- Gi-1 |- mi |Ci Gi
		---------------------------------                		    :: SeqTypable
		G |- m1; ...; mi |U i=0-k Ci Gi

		% merge(G0, G1, G2) = { {x:T} | x in dom(G0) ^ T = merge(G1[x], G2[x])}
		% merge(T1, T2) = 

		G  |- e : T0 |C0 G0
		G0 |-   m1   |C1 G1
		G0 |-   m2   |C2 G2
		G3 = merge(G0, G1, G2)
		---------------------------------                		    :: IfTypable1
		G |- if (e) {m1} else {m2} |(C0 u (C1 u C2)) u {T0 = boolean} G3

		G  |- e : T0 |C0 G0
		G1 |-   m    |C1 G1
		G2 = merge(G0, G1, G0)
		---------------------------------                		    :: IfTypable2
		G |- if (e) {m} |(C0 u C1) u {T0 = boolean} G2

		G  |- e : T0 |C0 G0
		G0 |-   m    |C1 G1
		G2 = merge(G0, G1, G0)
		---------------------------------                		    :: WhileTypable
		G |- while (e) {m} |(C0 u C1) u {T0 = boolean} G2

		G  |-   e1  |C0 G0
		G0 |- e2:T2 |C1 G1
		G1 |-   m   |C2 G2
		G2 |-   e3  |C3 G3
		G4 = merge(G1, G3, G1)
		---------------------------------                		    :: ForTypable
		G |- for (e1;e2;e3) {m} |(C0 u C1) u ((C2 u C3) u {T0 = boolean}) G4

		T is fresh
		---------------------------------                		    :: DecTypable
		G |- var id |\{} G u {id : IllDefined(T)}

		T' is fresh
		G |- e : T |C G'
		---------------------------------                		    :: DefTypable
		G |- var id = e |C u {T' <c T} G' u {id : T'}

		G |- var vd1 |C1 G1 --- Gk-1 |- var vdk |Ck Gk
		---------------------------------------            		    :: MultiDecTypable
		G |- var vd1,...,vdk |(U i=i-k Ck) G2
	
	defn G |- (s, h) :: M:: store ::'' {{tex [[G]] \vdash (s, \Theta) }} by	
