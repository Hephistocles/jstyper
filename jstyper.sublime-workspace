{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"enfo",
				"enforcedConstraints"
			],
			[
				"get",
				"getFreshType"
			],
			[
				"empt",
				"emptyObjType"
			],
			[
				"conta",
				"containerType"
			],
			[
				"insert",
				"insertBefore"
			],
			[
				"asser",
				"createTypeAssertion"
			],
			[
				"traili",
				"trailingComments"
			],
			[
				"com",
				"commentsToDelete"
			],
			[
				"chu",
				"chunkStartNode"
			],
			[
				"cu",
				"currentChunk"
			],
			[
				"chunk",
				"chunkJudgements"
			],
			[
				"annota",
				"annotationsJudgement"
			],
			[
				"jud",
				"judgement"
			],
			[
				"ini",
				"initialJudgement"
			],
			[
				"lea",
				"leadingComments"
			],
			[
				"for",
				"for	for (…) {…}"
			],
			[
				"makeT",
				"makeTypeEnvEntry"
			],
			[
				"program",
				"program_point"
			],
			[
				"sub",
				"substitutions"
			],
			[
				"X",
				"X"
			],
			[
				"const",
				"constraint"
			],
			[
				"T",
				"T"
			],
			[
				"nex",
				"nextType"
			],
			[
				"acorn",
				"accornwalker"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/formal/jstyper.ott",
			"settings":
			{
				"buffer_size": 26268,
				"line_ending": "Unix"
			}
		},
		{
			"file": "jstyper.sublime-project",
			"settings":
			{
				"buffer_size": 426,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*jshint unused:true, bitwise:true, eqeqeq:true, undef:true, latedef:true, eqnull:true */\n/* global require, module, console */\n\n/* this module is the central point for type-checking provided\n	code, and for generating gradual-typing-compiled source code */\n\n\n// for constructing and deconstructing the AST respectively\n// var acorn = require(\"acorn\");\n// var escodegen = require(\"escodegen\");\nvar UglifyJS = require(\"uglify-js2\");\n\n// for our jstyper objects\nvar Classes = require(\"./classes.js\");\nrequire(\"./judgements.js\");\nrequire(\"./checkUntyped.js\");\nrequire(\"./assertions.js\");\nrequire(\"./insertBefore.js\");\n\nString.prototype.format = function() {\n	var newStr = this,\n		i = 0;\n	while (/%s/.test(newStr))\n		newStr = newStr.replace(\"%s\", arguments[i++]);\n	return newStr;\n};\n\n// obtain a set of substitutions which will make the constraints unifiable\n// also generate checks for dynamic types\nfunction solveConstraints(constraints) {\n	// originally from Pierce p. 327\n	\n	// base case\n	if (constraints.length < 1)\n		return {substitutions:[], checks:[]};\n\n	var constraint = constraints[0];\n	var remainder = constraints.slice(1);\n\n	var leftType = constraint.leftType;\n	var rightType = constraint.rightType;\n	var label;\n\n	// if this is an 'enforcing' constraint, then we generate extra members\n	if (constraint.enforce === true) {\n		for (label in leftType.memberTypes) {\n\n			// if rightType has a field missing, we add it here. Adding these\n			// will make the equals check below return true, and then\n			// constraints will be generated to assert that each of rightType's\n			// members are the same type as leftType's members\n			if (rightType.memberTypes[label] === undefined) {\n				rightType.memberTypes[label] = Classes.TypeEnv.getFreshType();\n			}\n		}\n	}\n\n	// types are equal => constraint satisfied\n	// for objects, 'equal' means rightType has at least the structure of leftType\n	if (leftType.equals(rightType)) {\n\n		if (leftType.type !== \"object\")	\n			return solveConstraints(remainder);\n\n		// generate new constraints asserting that the members of leftType\n		// and of rightType have the same type\n		var newConstraints = [];\n		for (label in leftType.memberTypes) {\n			newConstraints.push(new Classes.Constraint(leftType.memberTypes[label], rightType.memberTypes[label], null));\n		}\n\n		return solveConstraints(remainder.concat(newConstraints));\n	}\n\n\n	// constraints involving dynamic types are trivially satisfied\n	// if the leftType (write) type is dynamic, we always allow\n	if (leftType.isDynamic)\n		return solveConstraints(remainder);\n\n	// if the rightType (read) type is dynamic, we allow but must typecheck\n	// TODO: object types don't get type-checks, they should get guarded\n	if (rightType.isDynamic && rightType !== \"object\") {\n		var solution1 = solveConstraints(remainder);\n		solution1.checks.push({node:constraint.rightNode, type:leftType});\n		return solution1;\n	}\n\n\n	// if one type is not concrete, it can be substituted by the other\n	var sub;\n	if (!leftType.isConcrete) {\n		sub = new Classes.Substitution(leftType, rightType);\n	} else if (!rightType.isConcrete) {\n		sub = new Classes.Substitution(rightType, leftType);\n\n	} // both are different concrete types\n	else {\n		throw new Error(\" Failed Unification: \" + leftType.toString() + \" != \" + rightType.toString());\n	}\n\n	// apply the substitution to the remaining constraints\n	for (var i = 0; i < remainder.length; i++) {\n		sub.apply(remainder[i]);\n	}\n\n	// it's quite important that substitutions are applied in the right order\n	// here first item should be applied first\n	var solution = solveConstraints(remainder);\n	solution.substitutions = [sub].concat(solution.substitutions);\n	return solution;\n}\n\nmodule.exports = function(src) {\n\n	// obtain AST\n	var ast;\n	try {\n		ast = UglifyJS.parse(src);\n	} catch (e) {\n		e.message = \"Parse Error: \" + e.message;\n		throw e;\n	}\n\n	// reset the fresh type counter for consistency\n	Classes.TypeEnv.nextType = 1;\n\n	// generate a judgement for (each annotated section of) the entire tree\n	// it's checkUntyped because, at the time of calling, we're not in the typed world yet\n	var chunks = ast.checkUntyped();\n\n	// check the judgement is valid and do gradual typing for each chunk\n	for (var i = 0; i< chunks.length; i++) {\n\n		// solve the generated constraints, or throw an error if this isn't possible\n		var solution = solveConstraints(chunks[i].C, chunks[i].gamma);\n\n		// apply the solution substitutions to the type environment\n		for (var j=0; j<solution.substitutions.length; j++) {\n			chunks[i].gamma.applySubstitution(solution.substitutions[j]);\n			for (var k = 0; k<solution.checks.length; k++) {\n				solution.checks[k].type.applySubstitution(solution.substitutions[j]);\n			}\n		}\n\n		// Prepare a helpful message for each typed chunk\n		var typeComment = \" jstyper types: \";\n		var sep = \"\";\n		for (var o = 0; o < chunks[i].gamma.length; o++) {\n			var location = (chunks[i].gamma[o].node)?\n				\"l%s c%s\".format(\n					chunks[i].gamma[o].node.start.line,\n					chunks[i].gamma[o].node.start.col)\n				:\"imported\";\n\n			typeComment += sep;\n			typeComment += \"%s (%s): %s\".format(\n				chunks[i].gamma[o].name,\n				location,\n				chunks[i].gamma[o].type.toString());\n			sep = \"; \";\n		}\n\n		// prepend the types in a comment at the start of the chunk\n		chunks[i].nodes[0].start.comments_before.push(\n			new UglifyJS.AST_Token({\n				type: 'comment1',\n				value: typeComment\n			})\n		);\n\n		// TODO: append a notice indicating the end of the typed section (not easy without a trailing comments property!)\n		\n		for (var l = 0; l<solution.checks.length; l++) {\n			// insert the checks as appropriate\n			// unfortunately we're replacing nodes as we go, so we'll also need to substitute nodes as we go along\n			var typeChecks = solution.checks[l].node.getTypeChecks( solution.checks[l].type );\n			if (typeChecks) {\n				for (var p = 0; p < typeChecks.length; p++) {\n					var subs = solution.checks[l].node.parent().insertBefore(typeChecks[p], solution.checks[l].node);\n					for (var m = 0; m<subs.length; m++) {\n						for (var n=l; n<solution.checks.length; n++) {\n							if (solution.checks[n].node === subs[m].from) {\n								solution.checks[n].node = subs[m].to;\n							}\n						}\n					}\n					\n				}\n			}\n		}\n	}\n\n	var checkRes = chunks;\n	var stream = UglifyJS.OutputStream({\n		beautify: true,\n		comments: true,\n		width: 60\n	});\n	ast.print(stream);\n\n	return {\n		src: stream.toString(),\n		check: checkRes\n	};\n};",
			"file": "src/jstyper.js",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 6397,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/classes.js",
			"settings":
			{
				"buffer_size": 4860,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/judgements.js",
			"settings":
			{
				"buffer_size": 11394,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n% function calls\n% Object, Exception\n% @Fun, @Call\n\n% Calling a method\n\n------------------------------------------ [E-Call-Ref]\nH,l,ln*m([va~]) -> H,l,@Fun(ln,ln*m[,va~])\n\n% Calling a function\n\n------------------------------------------- [E-Call]\nH,l,va([va~]) -> H,l,@Fun(#Global,va[,va~])\n\n% Actually making the function call\n\n----------------------------------------------- [E-@Fun-Call]\nH,l,@Fun(l1,l2[,va~]) -> H,l,l2.@Call(l1[,va~])    \n		",
			"settings":
			{
				"buffer_size": 446,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Ott to PDF",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"tab",
				"Indentation: Convert to Tabs"
			],
			[
				"bea",
				"Javascript Beautify"
			],
			[
				":w",
				":w - Save"
			],
			[
				"align",
				"AlignTab: Table Mode"
			],
			[
				"ta",
				"Indentation: Convert to Tabs"
			],
			[
				"js",
				"Javascript Beautify"
			],
			[
				"todo",
				"TodoReview: Project Files"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"error",
				"SublimeLinter: Previous Error"
			],
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"clear",
				"SublimeLinter: Clear Caches"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"subli",
				"SublimeLinter: Clear Caches"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"remoe",
				"Package Control: Remove Package"
			],
			[
				"dia",
				"Package Control: Disable Package"
			],
			[
				"vin",
				"Vintageous: Toggle Vim Ctrl Keys"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"canc",
				"Build: Cancel"
			],
			[
				"can",
				"Build: Cancel"
			],
			[
				"cancl",
				"Build: Cancel"
			],
			[
				"live",
				"AlignTab: Live Preview Mode"
			],
			[
				"lign",
				"AlignTab: Live Preview Mode"
			],
			[
				"liv",
				"AlignTab: Live Preview Mode"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"ali",
				"AlignTab"
			],
			[
				"livr",
				"AlignTab: Live Preview Mode"
			],
			[
				"alig",
				"AlignTab"
			],
			[
				"al",
				"AlignTab: Live Preview Mode"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"s",
				"Sort Lines"
			],
			[
				"uniq",
				"Permute Lines: Unique"
			],
			[
				"javas",
				"Set Syntax: JavaScript"
			],
			[
				"indent",
				"Indentation: Convert to Tabs"
			],
			[
				":W",
				":w - Save"
			],
			[
				"gutter",
				"SublimeLinter: Choose Gutter Theme"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Package Control: Discover Packages"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 347.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/christoph/dev/jstyper"
	],
	"file_history":
	[
		"/home/christoph/dev/jstyper/src/main.js",
		"/home/christoph/dev/jstyper/src/tests/test4.js",
		"/home/christoph/dev/jstyper/src/tests/test11.js",
		"/home/christoph/dev/jstyper/src/tests/test6.js",
		"/home/christoph/dev/jstyper/src/tests/test5.js",
		"/home/christoph/dev/jstyper/src/tests/test12.js",
		"/home/christoph/dev/jstyper/src/temp.txt",
		"/home/christoph/.config/sublime-text-3/Packages/Javascript Beautify/JavascriptBeautify.sublime-settings",
		"/home/christoph/.config/sublime-text-3/Packages/User/JavascriptBeautify.sublime-settings",
		"/home/christoph/Documents/FBMessageBackup - copy/litty_0.csv",
		"/home/christoph/Documents/FBMessageBackup - copy/litty_1.csv",
		"/home/christoph/Documents/FBMessageBackup - copy/litty_2.csv",
		"/home/christoph/Documents/FBMessageBackup - copy/litty_3.csv",
		"/home/christoph/Documents/InfoTheory II.txt",
		"/home/christoph/Documents/dev/jstyper/src/tests/test3-out.json",
		"/home/christoph/Documents/InfoTheory I.txt",
		"/home/christoph/Documents/dev/jstyper/src/jstyper.js",
		"/home/christoph/Documents/dev/jstyper/src/node_modules/uglify-js2/node_modules/optimist/index.js",
		"/home/christoph/Documents/dev/jstyper/src/node_modules/uglify-js2/test/compress/drop-unused.js",
		"/home/christoph/Documents/dev/jstyper/src/node_modules/.bin/uglifyjs2",
		"/home/christoph/.config/sublime-text-3/Packages/Shell Turtlestein/Shell Turtlestein.sublime-settings",
		"/home/christoph/Documents/dev/jstyper/src/tests/test4.js",
		"/home/christoph/Documents/dev/jstyper/src/tests/test2.js",
		"/home/christoph/Downloads/tues.txt",
		"/home/christoph/Downloads/tueweds.txt",
		"/home/christoph/Documents/dev/jstyper/src/tests/test3.js",
		"/home/christoph/Downloads/j_and_s (1).ott",
		"/home/christoph/Documents/dev/jstyper/src/te",
		"/home/christoph/.cache/.fr-YTPEl3/Documents/1/Pages/19.fpage",
		"/media/christoph/BED8F495D8F44D61/Part II/Bioinformatics.one",
		"/home/christoph/Downloads/j_and_s.ott",
		"/home/christoph/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/christoph/Documents/dev/jstyper/src/formal/jstyper.ott",
		"/home/christoph/.config/sublime-text-3/Packages/User/Plain text.sublime-settings",
		"/home/christoph/.config/sublime-text-3/Packages/User/CustomOtt.sublime-build",
		"/home/christoph/Downloads/jstyper.ott",
		"/media/christoph/D862E85762E83C3E/Documents and Settings/Christopher/Documents/OneNote Notebooks/Part II/Natural Language Processing.one"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 100.0,
		"where_history":
		[
			"",
			"/home/christoph/Documents/FBMessageBackup - copy"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"mj",
			"put",
			"m2",
			"s",
			"function",
			"\" \"",
			" ",
			"\"\n",
			" ",
			"2",
			"PropAssign",
			"readNode",
			"readType",
			"writeType",
			"readType",
			"writeType",
			"add",
			"constraints",
			", gamma",
			"emptyObjType",
			"solveConstraints",
			"node2",
			"type2",
			"type1",
			"Classes.Constraint",
			"Constraint",
			"makeSubstitution",
			"insertBefore",
			"	newNode.leadingComments = treeNode.parent.body[i].leadingComments;\n		",
			"initTypeJudgement",
			"after",
			"isConcrete",
			"checks",
			"check",
			"getTypeEnvEntry",
			"gamma",
			"enviro",
			"environ",
			"lookup",
			"makeJudgement",
			"makeTypeEnvEntry",
			"makeType",
			"dynamic",
			"solveC",
			"checkAssignmentExpression",
			"checkIdentifier",
			"assign",
			"makeType",
			"checkAssignmentExpression",
			"makeType",
			"makeTypeEnvEntry",
			"too",
			"makeConstraint",
			"checkIdentifier",
			"checkExpression",
			"makeConstraint",
			"solveConstraints",
			"makeConstraint",
			"program_point",
			"ram_point, type) {\n	return {\n		name: name,\n		program_point: ",
			"program_point",
			"makeTypeEnvEntry",
			"program_point",
			"makeTypeEnvEntry",
			"program_point",
			"1641243041",
			"eddy",
			"gamma",
			"emptystatement",
			"sep",
			"annotationsJudgement",
			"description",
			"console",
			"c",
			"gamma",
			"declaration",
			"annotationsJudgement",
			"entering",
			"consol",
			"checkStatement",
			"checkVariableDeclaration",
			"checkVariableDeclarator",
			"push",
			"token",
			"push",
			"typecheck",
			"checkProgram",
			"typecheck",
			"judgements",
			"typecheck",
			"get_ast",
			"\n				",
			"search",
			"checkProgram",
			"body",
			"makeJudgement",
			"judgement",
			"newGamma",
			"initialJudgement",
			"typedWorld",
			"initTypeJudgement",
			"node.leadingComments",
			"checkProgram",
			"makeConstraint",
			"o",
			"makeConstraint",
			"C",
			"typecheck",
			"solveConstraints",
			"constraint",
			"console.log",
			"checkExpression",
			"typecheck",
			"console",
			"vd",
			"makeType",
			"y",
			"makeType",
			"isConcrete",
			"Enum",
			"type",
			"Type",
			"makeType",
			"get_src",
			"typecheck",
			"jstyper",
			" +",
			"\\s\\s"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"Litty Carter",
			" ",
			"\\s",
			", \\1",
			"makeJudgement",
			"\\t",
			"\\n",
			"}\\n\\n\\n{",
			"X",
			"<",
			" ",
			"\\s",
			"Ref",
			"var",
			"par"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/formal/jstyper.ott",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26268,
						"regions":
						{
						},
						"selection":
						[
							[
								24957,
								24957
							]
						],
						"settings":
						{
							"WordCountShouldRun": true,
							"WordCountSyntax": "plain text",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9235.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "jstyper.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 426,
						"regions":
						{
						},
						"selection":
						[
							[
								363,
								363
							]
						],
						"settings":
						{
							"WordCountShouldRun": false,
							"WordCountSyntax": "json",
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 365.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/jstyper.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6397,
						"regions":
						{
						},
						"selection":
						[
							[
								1316,
								1316
							]
						],
						"settings":
						{
							"WordCountShouldRun": false,
							"WordCountSyntax": "javascript",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 315.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/classes.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4860,
						"regions":
						{
						},
						"selection":
						[
							[
								2701,
								2701
							]
						],
						"settings":
						{
							"WordCountSyntax": "javascript",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1440.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "src/judgements.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11394,
						"regions":
						{
						},
						"selection":
						[
							[
								3195,
								3195
							]
						],
						"settings":
						{
							"WordCountShouldRun": false,
							"WordCountSyntax": "javascript",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 510.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 446,
						"regions":
						{
						},
						"selection":
						[
							[
								328,
								328
							]
						],
						"settings":
						{
							"WordCountShouldRun": true,
							"WordCountSyntax": "plain text",
							"auto_name": "",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 235.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "jstyper.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"class",
				"src/classes.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/dev/mabel/mabel.sublime-project"
			],
			[
				"mab",
				"~/dev/mabel/mabel.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"_vintageous_last_buffer_search": "checkIdentifier",
		"_vintageous_reset_during_init": true,
		"vintage":
		{
			"_cmdline_cd": "/home/christoph/Documents/dev/jstyper/src"
		}
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 221.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
